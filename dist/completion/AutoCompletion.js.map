{"version":3,"sources":["../../src/completion/AutoCompletion.js"],"names":["KEYWORD_ITEMS","CypherKeywords","map","keyword","type","CompletionTypes","KEYWORD","view","content","postfix","AbstractCachingCompletion","cache","query","types","typeData","cached","calculateItems","reduce","acc","items","SchemaBasedCompletion","schema","LABEL","labels","label","RELATIONSHIP_TYPE","relationshipTypes","relType","PROPERTY_KEY","propertyKeys","propKey","FUNCTION_NAME","functions","name","signature","PROCEDURE_NAME","procedures","CONSOLE_COMMAND_NAME","consoleCommands","consoleCommandName","description","PARAMETER","parameters","parameter","providers","PROCEDURE_OUTPUT","findByName","e","returnItems","procedure","_","find","CONSOLE_COMMAND_SUBCOMMAND","filterLastElement","path","length","currentLevel","i","foundCommand","commands","QueryBasedCompletion","referenceProviders","getNames","VARIABLE","CypherTypes","VARIABLE_CONTEXT","emptyProvider","AutoCompletion","updateSchema","filter","text","toLowerCase","filteredText","filterText","completionItemFilter","list","queryBased","schemaBased","s","t","complete","key","element","getText","parent","parentCtx","test","constructor","MAP_LITERAL_ENTRY","startsWith","slice","start","RELATIONSHIP_TYPE_CONTEXT","NODE_LABEL_CONTEXT","TreeUtils","hasErrorNode","stop"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2002-2017 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *\n * This file is part of Neo4j.\n *\n * Neo4j is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { filter as fuzzySearch } from 'fuzzaldrin';\nimport _ from 'lodash';\nimport * as CypherTypes from '../lang/CypherTypes';\nimport * as CompletionTypes from './CompletionTypes';\nimport CypherKeywords from '../lang/CypherKeywords';\nimport TreeUtils from '../util/TreeUtils';\nimport escapeCypher from '../util/escapeCypher';\n\nexport const KEYWORD_ITEMS = CypherKeywords.map((keyword) => ({\n  type: CompletionTypes.KEYWORD,\n  view: keyword,\n  content: keyword,\n  postfix: null,\n}));\n\nclass AbstractCachingCompletion {\n  cache = {};\n\n  constructor(cache = {}) {\n    this.cache = cache;\n  }\n\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  calculateItems(type, query = null) {\n    return [];\n  }\n\n  complete(types, query) {\n    return types\n      .map((typeData) => {\n        const cached = this.cache[typeData.type];\n        if (cached != null) {\n          return cached;\n        }\n        return this.calculateItems(typeData, query);\n      })\n      .reduce((acc, items) => [...acc, ...items], []);\n  }\n}\n\nclass SchemaBasedCompletion extends AbstractCachingCompletion {\n  schema = {};\n\n  static providers = {\n    [CompletionTypes.PROCEDURE_OUTPUT]: (schema, typeData) => {\n      const findByName = (e) => e.name === typeData.name && e.returnItems !== [];\n      const procedure = _.find(schema.procedures, findByName);\n      if (procedure) {\n        return procedure.returnItems.map(({ name, signature }) => ({\n          type: CompletionTypes.PROCEDURE_OUTPUT,\n          view: name,\n          content: name,\n          postfix: ` :: ${signature}`,\n        }));\n      }\n      return [];\n    },\n    [CompletionTypes.CONSOLE_COMMAND_SUBCOMMAND]: (schema, typeData) => {\n      const { filterLastElement, path } = typeData;\n\n      const length = filterLastElement ? path.length - 1 : path.length;\n      let currentLevel = schema.consoleCommands;\n      for (let i = 0; i < length; i += 1) {\n        const foundCommand = _.find(currentLevel, ['name', path[i]]);\n        if (foundCommand) {\n          currentLevel = foundCommand.commands || [];\n        } else {\n          return [];\n        }\n      }\n\n      return currentLevel.map(({ name, description }) => ({\n        type: CompletionTypes.CONSOLE_COMMAND_SUBCOMMAND,\n        view: name,\n        content: name,\n        postfix: description || null,\n      }));\n    },\n  };\n\n  constructor(schema = {}) {\n    super({\n      [CompletionTypes.KEYWORD]: KEYWORD_ITEMS,\n      [CompletionTypes.LABEL]: (schema.labels || [])\n        .map((label) => ({\n          type: CompletionTypes.LABEL,\n          view: label,\n          content: escapeCypher(label),\n          postfix: null,\n        })),\n      [CompletionTypes.RELATIONSHIP_TYPE]: (schema.relationshipTypes || [])\n        .map((relType) => ({\n          type: CompletionTypes.RELATIONSHIP_TYPE,\n          view: relType,\n          content: escapeCypher(relType),\n          postfix: null,\n        })),\n      [CompletionTypes.PROPERTY_KEY]: (schema.propertyKeys || [])\n        .map((propKey) => ({\n          type: CompletionTypes.PROPERTY_KEY,\n          view: propKey,\n          content: escapeCypher(propKey),\n          postfix: null,\n        })),\n      [CompletionTypes.FUNCTION_NAME]: (schema.functions || [])\n        .map(({ name, signature }) => ({\n          type: CompletionTypes.FUNCTION_NAME,\n          view: name,\n          content: escapeCypher(name),\n          postfix: signature,\n        })),\n      [CompletionTypes.PROCEDURE_NAME]: (schema.procedures || [])\n        .map(({ name, signature }) => ({\n          type: CompletionTypes.PROCEDURE_NAME,\n          view: name,\n          content: name,\n          postfix: signature,\n        })),\n      [CompletionTypes.CONSOLE_COMMAND_NAME]: (schema.consoleCommands || [])\n        .map((consoleCommandName) => ({\n          type: CompletionTypes.CONSOLE_COMMAND_NAME,\n          view: consoleCommandName.name,\n          content: consoleCommandName.name,\n          postfix: consoleCommandName.description || null,\n        })),\n      [CompletionTypes.PARAMETER]: (schema.parameters || [])\n        .map((parameter) => ({\n          type: CompletionTypes.PARAMETER,\n          view: parameter,\n          content: parameter,\n          postfix: null,\n        })),\n    });\n    this.schema = schema;\n  }\n\n  calculateItems(typeData) {\n    return (SchemaBasedCompletion.providers[typeData.type] || (() => []))(this.schema, typeData);\n  }\n}\n\nclass QueryBasedCompletion extends AbstractCachingCompletion {\n  providers = {};\n\n  emptyProvider = { getNames: () => [] };\n\n  constructor(referenceProviders = {}) {\n    super();\n    this.providers = {\n      [CompletionTypes.VARIABLE]:\n        (query) => (referenceProviders[CypherTypes.VARIABLE_CONTEXT] || this.emptyProvider)\n          .getNames(query)\n          .map((name) => ({\n            type: CompletionTypes.VARIABLE,\n            view: name,\n            content: name,\n            postfix: null,\n          })),\n    };\n  }\n\n  calculateItems(typeData, query) {\n    return (this.providers[typeData.type] || (() => []))(query);\n  }\n}\n\nexport class AutoCompletion {\n  queryBased = null;\n\n  schemaBased = null;\n\n  constructor() {\n    this.updateSchema({});\n  }\n\n  getItems(types, { query = null, filter = '' }) {\n    const text = filter.toLowerCase();\n    const filteredText = AutoCompletion.filterText(text);\n\n    const completionItemFilter = () => true;\n\n    const list = [this.queryBased, this.schemaBased]\n      .filter((s) => s != null)\n      .map((t) => t.complete(types, query))\n      .reduce((acc, items) => [...acc, ...items], [])\n      .filter(completionItemFilter);\n\n    if (filteredText) {\n      return fuzzySearch(list, filteredText, { key: 'view' });\n    }\n    if (text) {\n      return fuzzySearch(list, text, { key: 'view' });\n    }\n    return list;\n  }\n\n  updateSchema(schema) {\n    this.schemaBased = new SchemaBasedCompletion(schema);\n  }\n\n  updateReferenceProviders(referenceProviders) {\n    this.queryBased = new QueryBasedCompletion(referenceProviders);\n  }\n\n  /**\n   * Define whether element should be replaced or not.\n   */\n  static shouldBeReplaced(element) {\n    if (element == null) {\n      return false;\n    }\n\n    const text = element.getText();\n    const parent = element.parentCtx;\n\n    // If element is whitespace\n    if (/^\\s+$/.test(text)) {\n      return false;\n    }\n    // If element is opening bracket (e.g. start of relationship pattern)\n    if (text === '[') {\n      return false;\n    }\n    // If element is opening brace (e.g. start of node pattern)\n    if (text === '(') {\n      return false;\n    }\n\n    if (text === '.') {\n      return false;\n    }\n\n    if (text === '{') {\n      return false;\n    }\n    if (text === '$') {\n      return false;\n    }\n    return !(text === ':' && parent != null && parent.constructor.name === CypherTypes.MAP_LITERAL_ENTRY);\n  }\n\n  static filterText(text) {\n    if (text.startsWith('$')) {\n      return text.slice(1);\n    }\n    return text;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static calculateSmartReplaceRange(element, start) {\n    // If we are in relationship type or label and we have error nodes in there.\n    // This means that we typed in just ':' and Antlr consumed other tokens in element\n    // In this case replace only ':'\n    if (element.constructor.name === CypherTypes.RELATIONSHIP_TYPE_CONTEXT\n      || element.constructor.name === CypherTypes.NODE_LABEL_CONTEXT) {\n      if (TreeUtils.hasErrorNode(element)) {\n        return { filterText: ':', start, stop: start };\n      }\n    }\n\n    return null;\n  }\n}\n"],"file":"AutoCompletion.js"}