{"version":3,"sources":["../../src/completion/CompletionTypeResolver.js"],"names":["orderedCompletionRules","rules","ruleNoop","ruleVariableInExpressionPossibleFunction","ruleLiteralEntry","rulePropInMapLiteral","ruleParamStartsWithDollar","ruleSpecificParent","ruleNodePattern","ruleRelationshipPattern","ruleProcedureOutputsInCallClause","ruleCallClauseBeginning","ruleConsoleCommandSubcommands","rulePropertyLookup","rulePossibleKeyword","evaluateRules","element","i","length","rule","types","CompletionTypeResolver","found","CompletionTypes","ALL"],"mappings":";;;;;;;;;AAoBA;;AACA;;;;;;;;;;;;AAEA;AACA,IAAMA,sBAAsB,GAAG,CAC7BC,KAAK,CAACC,QADuB,EAE7BD,KAAK,CAACE,wCAFuB,EAG7BF,KAAK,CAACG,gBAHuB,EAI7BH,KAAK,CAACI,oBAJuB,EAK7BJ,KAAK,CAACK,yBALuB,EAM7BL,KAAK,CAACM,kBANuB,EAO7BN,KAAK,CAACO,eAPuB,EAQ7BP,KAAK,CAACQ,uBARuB,EAS7BR,KAAK,CAACS,gCATuB,EAU7BT,KAAK,CAACU,uBAVuB,EAW7BV,KAAK,CAACW,6BAXuB,EAY7BX,KAAK,CAACY,kBAZuB,EAa7BZ,KAAK,CAACa,mBAbuB,CAA/B;;AAgBA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,sBAAsB,CAACkB,MAA3C,EAAmDD,CAAC,IAAI,CAAxD,EAA2D;AACzD,QAAME,IAAI,GAAGnB,sBAAsB,CAACiB,CAAD,CAAnC;AACA,QAAMG,KAAK,GAAGD,IAAI,CAACH,OAAD,CAAlB;;AACA,QAAII,KAAK,CAACF,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAOE,KAAP;AACD;AACF;;AAED,SAAO,EAAP;AACD;;IAEoBC,sB;;;;;;;WACnB,kBAAgBL,OAAhB,EAAyB;AACvB;AACA,UAAIA,OAAO,IAAI,IAAf,EAAqB;AACnB,eAAO;AACLM,UAAAA,KAAK,EAAE,KADF;AAELF,UAAAA,KAAK,EAAEG,eAAe,CAACC;AAFlB,SAAP;AAID,OAPsB,CASvB;;;AACA,UAAMJ,KAAK,GAAGL,aAAa,CAACC,OAAD,CAA3B;;AACA,UAAII,KAAK,CAACF,MAAN,GAAe,CAAnB,EAAsB;AACpB,eAAO;AACLI,UAAAA,KAAK,EAAE,IADF;AAELF,UAAAA,KAAK,EAALA;AAFK,SAAP;AAID,OAhBsB,CAkBvB;;;AACA,aAAO;AACLE,QAAAA,KAAK,EAAE,KADF;AAELF,QAAAA,KAAK,EAAEG,eAAe,CAACC;AAFlB,OAAP;AAID","sourcesContent":["/*\n * Copyright (c) 2002-2017 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *\n * This file is part of Neo4j.\n *\n * Neo4j is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as CompletionTypes from './CompletionTypes';\nimport * as rules from './rules';\n\n// Rules are sorted starting with specific ones, and finishing with more generic ones.\nconst orderedCompletionRules = [\n  rules.ruleNoop,\n  rules.ruleVariableInExpressionPossibleFunction,\n  rules.ruleLiteralEntry,\n  rules.rulePropInMapLiteral,\n  rules.ruleParamStartsWithDollar,\n  rules.ruleSpecificParent,\n  rules.ruleNodePattern,\n  rules.ruleRelationshipPattern,\n  rules.ruleProcedureOutputsInCallClause,\n  rules.ruleCallClauseBeginning,\n  rules.ruleConsoleCommandSubcommands,\n  rules.rulePropertyLookup,\n  rules.rulePossibleKeyword,\n];\n\nfunction evaluateRules(element) {\n  for (let i = 0; i < orderedCompletionRules.length; i += 1) {\n    const rule = orderedCompletionRules[i];\n    const types = rule(element);\n    if (types.length > 0) {\n      return types;\n    }\n  }\n\n  return [];\n}\n\nexport default class CompletionTypeResolver {\n  static getTypes(element) {\n    // If element is null, then no types\n    if (element == null) {\n      return {\n        found: false,\n        types: CompletionTypes.ALL,\n      };\n    }\n\n    // Retrieve types from rules\n    const types = evaluateRules(element);\n    if (types.length > 0) {\n      return {\n        found: true,\n        types,\n      };\n    }\n\n    // If no types found, then no types\n    return {\n      found: false,\n      types: CompletionTypes.ALL,\n    };\n  }\n}\n"],"file":"CompletionTypeResolver.js"}