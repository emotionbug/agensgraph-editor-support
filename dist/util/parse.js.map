{"version":3,"sources":["../../src/util/parse.js"],"names":["parse","input","referencesListener","ReferencesListener","errorListener","ErrorListener","chars","antlr4","InputStream","lexer","CypherLexer","removeErrorListeners","addErrorListener","tokens","CommonTokenStream","parser","CypherParser","buildParseTrees","addParseListener","parseTree","cypher","queries","indexes","referencesProviders","CypherTypes","SYMBOLIC_CONTEXTS","reduce","acc","t","ReferencesProvider"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEe,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACnC,MAAMC,kBAAkB,GAAG,IAAIC,2BAAJ,EAA3B;AACA,MAAMC,aAAa,GAAG,IAAIC,sBAAJ,EAAtB;AACA,MAAMC,KAAK,GAAG,IAAIC,eAAOC,WAAX,CAAuBP,KAAvB,CAAd;AACA,MAAMQ,KAAK,GAAG,IAAIC,oBAAJ,CAAgBJ,KAAhB,CAAd;AACAG,EAAAA,KAAK,CAACE,oBAAN;AACAF,EAAAA,KAAK,CAACG,gBAAN,CAAuBR,aAAvB;AACA,MAAMS,MAAM,GAAG,IAAIN,eAAOO,iBAAX,CAA6BL,KAA7B,CAAf;AACA,MAAMM,MAAM,GAAG,IAAIC,qBAAJ,CAAiBH,MAAjB,CAAf;AACAE,EAAAA,MAAM,CAACE,eAAP,GAAyB,IAAzB;AACAF,EAAAA,MAAM,CAACJ,oBAAP;AACAI,EAAAA,MAAM,CAACH,gBAAP,CAAwBR,aAAxB;AACAW,EAAAA,MAAM,CAACG,gBAAP,CAAwBhB,kBAAxB;AACA,MAAMiB,SAAS,GAAGJ,MAAM,CAACK,MAAP,EAAlB;AACA,MAAQC,OAAR,GAA6BnB,kBAA7B,CAAQmB,OAAR;AAAA,MAAiBC,OAAjB,GAA6BpB,kBAA7B,CAAiBoB,OAAjB;AAEA,MAAMC,mBAAmB,GAAGC,WAAW,CAACC,iBAAZ,CAA8BC,MAA9B,CAC1B,UAACC,GAAD,EAAMC,CAAN;AAAA,2CACKD,GADL,2BAEGC,CAFH,EAEO,IAAIC,2BAAJ,CAAuBR,OAAvB,EAAgCC,OAAO,CAACM,CAAD,CAAvC,CAFP;AAAA,GAD0B,EAK1B,EAL0B,CAA5B;AAQA,SAAO;AACLT,IAAAA,SAAS,EAATA,SADK;AACMjB,IAAAA,kBAAkB,EAAlBA,kBADN;AAC0BE,IAAAA,aAAa,EAAbA,aAD1B;AACyCmB,IAAAA,mBAAmB,EAAnBA;AADzC,GAAP;AAGD","sourcesContent":["import antlr4 from 'antlr4';\nimport ReferencesProvider from '../references/ReferencesProvider';\nimport * as CypherTypes from '../lang/CypherTypes';\nimport CypherParser from '../_generated/CypherParser';\nimport CypherLexer from '../_generated/CypherLexer';\nimport ErrorListener from '../errors/ErrorListener';\nimport ReferencesListener from '../references/ReferencesListener';\n\nexport default function parse(input) {\n  const referencesListener = new ReferencesListener();\n  const errorListener = new ErrorListener();\n  const chars = new antlr4.InputStream(input);\n  const lexer = new CypherLexer(chars);\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(errorListener);\n  const tokens = new antlr4.CommonTokenStream(lexer);\n  const parser = new CypherParser(tokens);\n  parser.buildParseTrees = true;\n  parser.removeErrorListeners();\n  parser.addErrorListener(errorListener);\n  parser.addParseListener(referencesListener);\n  const parseTree = parser.cypher();\n  const { queries, indexes } = referencesListener;\n\n  const referencesProviders = CypherTypes.SYMBOLIC_CONTEXTS.reduce(\n    (acc, t) => ({\n      ...acc,\n      [t]: new ReferencesProvider(queries, indexes[t]),\n    }),\n    {},\n  );\n\n  return {\n    parseTree, referencesListener, errorListener, referencesProviders,\n  };\n}\n"],"file":"parse.js"}